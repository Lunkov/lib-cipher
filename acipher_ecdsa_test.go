package cipher

import (
  "testing"
  "github.com/stretchr/testify/assert"
  
  "crypto/sha512"
  "crypto/ecdsa"
	
  "github.com/Lunkov/go-hdwallet"
)

func TestAsyncECDSA(t *testing.T) {
  // Generate Key and Save
  rk := NewACipherECDSA("P-521")
  rk.GenerateKeyPair()
  privok := rk.SavePublicKey("./test/test.p521.key.pub")
  assert.True(t, privok)
  privok = rk.SavePrivateKey("123", "./test/test.p521.key.sec")
  assert.True(t, privok)

  // Load Public Key
  rkpub := NewACipherECDSA("P-521")
  pubok := rkpub.LoadPublicKey("./test/test.p521.key.pub") 
  assert.True(t,pubok)
  
  // Load Private Key
  rkpriv := NewACipherECDSA("P-521")
  privok = rkpriv.LoadPrivateKey("1233", "./test/test.p521.key.sec") 
  assert.False(t, privok)
  privok = rkpriv.LoadPrivateKey("123", "./test/test.p521.key.sec") 
  assert.True(t, privok)

  // Sign message with Private Key
  msg := ([]byte)("This Message for Sign")
  sign, signok := rkpriv.Sign(msg)
  assert.True(t, signok)
  
  // Verify message with Public Key
  vok := rkpub.Verify(msg, sign)
  assert.True(t, vok)
}

func TestAsyncECDSASerialize(t *testing.T) {
  mnemonic := "chase oil pigeon elegant ketchup whip frozen beauty unknown brass amount slender pony pottery attitude flavor rifle primary beach sign glue oven crazy lottery"
  seed, _ := hdwallet.NewSeed(mnemonic, "", hdwallet.English)
  master, _ := hdwallet.NewKey(false, hdwallet.Seed(seed))
  
  //pkBuf, okpk := PublicKeyToBytes(w.Master.PrivateECDSA)
  pkBuf, okpk := ECDSAPublicKeySerialize(master.PublicECDSA)

	assert.True(t, okpk)
  assert.Equal(t, []byte{0x34, 0xff, 0x81, 0x3, 0x1, 0x1, 0x11, 0x45, 0x43, 0x44, 0x53, 0x41, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x75, 0x66, 0x1, 0xff, 0x82, 0x0, 0x1, 0x3, 0x1, 0x4, 0x54, 0x79, 0x70, 0x65, 0x1, 0xc, 0x0, 0x1, 0x1, 0x58, 0x1, 0xa, 0x0, 0x1, 0x1, 0x59, 0x1, 0xa, 0x0, 0x0, 0x0, 0x47, 0xff, 0x82, 0x2, 0x20, 0x23, 0xf, 0x74, 0x93, 0x9e, 0x44, 0x5, 0x58, 0xc0, 0xf5, 0xf8, 0xc7, 0x37, 0xeb, 0x8, 0x7b, 0xd6, 0x6, 0x25, 0x60, 0xb0, 0x62, 0xc6, 0x9a, 0x18, 0x68, 0xef, 0x18, 0x5, 0x68, 0xe1, 0x6b, 0x1, 0x20, 0xc, 0x74, 0x19, 0x99, 0xe7, 0x3a, 0x8a, 0xd9, 0xdf, 0x6c, 0xd3, 0xb3, 0x56, 0x11, 0x4b, 0x4c, 0x1, 0x54, 0x7e, 0xf7, 0x85, 0x84, 0x71, 0xc, 0x32, 0xb2, 0xe6, 0xc7, 0x6a, 0x9, 0x49, 0x53, 0x0}, pkBuf)
  
  message := []byte("Hello world")
  signature, sok := ECDSASign(master.PrivateECDSA, message)
  assert.True(t, sok)
  //assert.Equal(t, []byte{0x30, 0x46, 0x2, 0x21, 0x0, 0x99, 0xfa, 0x56, 0x93, 0xe5, 0x7d, 0xcb, 0x0, 0x45, 0xeb, 0x7e, 0xef, 0xd7, 0x7f, 0x47, 0xdc, 0xd9, 0xf, 0x5c, 0x42, 0xbb, 0xf0, 0x97, 0xca, 0x3f, 0x8f, 0x3, 0x5a, 0xee, 0xc2, 0x33, 0x3c, 0x2, 0x21, 0x0, 0xdb, 0xbd, 0xed, 0xe5, 0xc, 0x6b, 0xaa, 0x8d, 0x8d, 0x77, 0x1c, 0x0, 0x9a, 0x63, 0x90, 0x4f, 0xc4, 0x68, 0x57, 0xf2, 0x1a, 0xf4, 0xd4, 0xe7, 0x86, 0x24, 0x73, 0x57, 0xa2, 0x21, 0x25, 0x49}, signature)
  
  
  hashed := sha512.Sum512(message)
  vok1 := ecdsa.VerifyASN1(master.PublicECDSA, hashed[:], signature)
  assert.True(t, vok1)
  
  vok := ECDSADeserializeAndVerify(pkBuf, message, signature)
  assert.True(t, vok)
  
  ciph := NewACipherECDSA("")
  cpok := ciph.PublicKeyDeserialize(pkBuf)
  assert.True(t, cpok)
  vok2 := ciph.Verify(message, signature)
  assert.True(t, vok2)
}
